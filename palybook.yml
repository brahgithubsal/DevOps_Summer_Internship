- hosts: all
  become: 'yes'
  tasks:
    - name: update APT packages
      apt:
        update_cache: 'yes'
    - name: apply sysctl params without reboot
      command: sysctl --system

    - name: disable SWAP (Kubeadm requirement)
      shell: |
        swapoff -a
    - name: disable SWAP in fstab (Kubeadm requirement)
      replace:
        path: /etc/fstab
        regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
        replace: '# \1'
    - name: Set the hostname for master node
      ansible.builtin.hostname:
        name: master
    - name: Update the /etc/hosts file with master entry
      ansible.builtin.lineinfile:
        path: /etc/hosts
        line: '{{ hostvars[''master''].ansible_host }} master'
        state: present
    - name: create an empty file for the Containerd module
      copy:
        content: ''
        dest: /etc/modules-load.d/containerd.conf
        force: 'no'
    - name: configure modules for Containerd
      blockinfile:
        path: /etc/modules-load.d/containerd.conf
        block: |
          overlay
          br_netfilter
    - name: create an empty file for Kubernetes sysctl params
      copy:
        content: ''
        dest: /etc/sysctl.d/99-kubernetes-cri.conf
        force: 'no'
    - name: configure sysctl params for Kubernetes
      lineinfile:
        path: /etc/sysctl.d/99-kubernetes-cri.conf
        line: '{{ item }}'
      with_items:
        - net.bridge.bridge-nf-call-iptables = 1
        - net.ipv4.ip_forward = 1
        - net.bridge.bridge-nf-call-ip6tables = 1
    - name: apply sysctl params without reboot
      command: sysctl --system

    - name: install APT Transport HTTPS
      apt:
        name: apt-transport-https
        state: present
    - name: add Docker apt-key
      get_url:
        url: 'https://download.docker.com/linux/ubuntu/gpg'
        dest: /etc/apt/keyrings/docker-apt-keyring.asc
        mode: '0644'
        force: true
    - name: add Docker's APT repository
      apt_repository:
        repo: >-
          deb [arch={{ 'amd64' if ansible_architecture == 'x86_64' else 'arm64' }} signed-by=/etc/apt/keyrings/docker-apt-keyring.asc] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
        state: present
        update_cache: 'yes'
    - name: add Kubernetes apt-key
      get_url:
        url: 'https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key'
        dest: /etc/apt/keyrings/kubernetes-apt-keyring.asc
        mode: '0644'
        force: true
    - name: add Kubernetes' APT repository
      apt_repository:
        repo: >-
          deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.asc] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /
        state: present
        update_cache: 'yes'
    - name: install Containerd
      apt:
        name: containerd.io
        state: present
    - name: create Containerd directory
      file:
        path: /etc/containerd
        state: directory
    - name: add Containerd configuration
      shell: /usr/bin/containerd config default > /etc/containerd/config.toml
    - name: configuring the systemd cgroup driver for Containerd
      lineinfile:
        path: /etc/containerd/config.toml
        regexp: ' SystemdCgroup = false'
        line: ' SystemdCgroup = true'
    - name: enable the Containerd service and start it
      systemd:
        name: containerd
        state: restarted
        enabled: 'yes'
        daemon-reload: 'yes'
    - name: install Kubelet
      apt:
        name: kubelet=1.29.*
        state: present
        update_cache: true
    - name: install Kubeadm
      apt:
        name: kubeadm=1.29.*
        state: present
    - name: 'enable the Kubelet service, and enable it persistently'
      service:
        name: kubelet
        enabled: 'yes'
    - name: load br_netfilter kernel module
      modprobe:
        name: br_netfilter
        state: present
    - name: set bridge-nf-call-iptables
      sysctl:
        name: net.bridge.bridge-nf-call-iptables
        value: 1
    - name: set ip_forward
      sysctl:
        name: net.ipv4.ip_forward
        value: 1

- hosts: master
  become: 'yes'
  tasks:
    - name: install Kubectl
      apt:
        name: kubectl=1.29.*
        state: present
        force: 'yes'

- hosts: master
  become: 'yes'
  tasks:
    - name: initialize the cluster (this could take some time)
      shell: kubeadm init --pod-network-cidr=10.244.0.0/16 
    - name: sleep for 30 seconds
      wait_for:
        timeout: 30
    - name: create .kube directory
      become: 'yes'
      become_user: adminuser
      file:
        path: $HOME/.kube
        state: directory
        mode: 493
    - name: copy admin.conf to user's kube config
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/adminuser/.kube/config
        remote_src: 'yes'
        owner: adminuser

- hosts: master
  become: 'no'
  tasks:
    - name: Install Calico network plugin
      command: >-
        kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.25.0/manifests/calico.yaml

- hosts: master
  become: 'yes'
  tasks:
    - name: get join command
      shell: kubeadm token create --print-join-command
      register: join_command_raw
    - name: set join command
      set_fact:
        join_command: '{{ join_command_raw.stdout_lines[0] }}'

- hosts: worker
  become: 'yes'
  tasks:
    - name: TCP port 6443 on master is reachable from worker
      wait_for:
        host: '{{ hostvars[''master''].ansible_host }}'
        port: 6443
        timeout: 300
    - name: Set hostname to 'worker'
      shell: hostnamectl set-hostname worker
      become: 'yes'
    - name: Join cluster
      shell: '{{ hostvars[''master''].join_command }}'
      args:
        chdir: /home/adminuser
